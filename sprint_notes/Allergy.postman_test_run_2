{
	"id": "c577a7e5-0310-476f-993d-18c71368ff4a",
	"name": "Allergy",
	"allTests": [],
	"timestamp": "2019-07-24T00:03:58.270Z",
	"collection_id": "af1b350c-31e2-4f59-baf6-abf872f5b807",
	"folder_id": "864e1f20-d97c-432f-99f7-08df0fba9677",
	"target_type": "folder",
	"environment_id": "225804e0-0e2f-47eb-b7eb-82f18cb885ac",
	"data": [],
	"delay": 0,
	"count": 1,
	"collection": {
		"id": "af1b350c-31e2-4f59-baf6-abf872f5b807",
		"name": "US_Core_R4",
		"description": "US Core R4 Examples",
		"auth": {
			"type": "apikey",
			"apikey": [
				{
					"key": "key",
					"value": "Epic-Client-ID"
				},
				{
					"key": "value",
					"value": "ArgoAAAA-A0be-4d9c-bb49-000000000000"
				}
			]
		},
		"events": [
			{
				"listen": "prerequest",
				"script": {
					"id": "81a15c2d-e6f3-45ad-b7ff-fccff31adc9f",
					"type": "text/javascript",
					"exec": [
						""
					]
				}
			},
			{
				"listen": "test",
				"script": {
					"id": "52701d41-d47f-4215-9c15-1f1c7d7e3c9d",
					"type": "text/javascript",
					"exec": [
						""
					]
				}
			}
		],
		"variables": [],
		"order": [],
		"folders_order": [
			"00b908ce-58b3-4d98-ab60-bfa55c05af9a",
			"864e1f20-d97c-432f-99f7-08df0fba9677",
			"08e1872f-93d2-4115-ba96-8dbfffdf01ed",
			"65480b3c-13c0-427a-9c41-4eba3e238e1e",
			"13c53e28-3c6c-4537-a6f1-295ea7e197a7",
			"e891e5d4-56b4-4277-bead-9e9ccd141105",
			"e5d2f15d-9ae9-4257-92e0-570dc35ab648"
		],
		"owner": "1447203",
		"favorite": false,
		"isFavorite": true
	},
	"folder": {
		"id": "864e1f20-d97c-432f-99f7-08df0fba9677",
		"name": "Allergy",
		"description": "",
		"auth": null,
		"events": null,
		"collection": "af1b350c-31e2-4f59-baf6-abf872f5b807",
		"folder": null,
		"order": [
			"8d8cc065-248a-41ba-8b82-7bfab6aa5ae7",
			"c926fee7-9839-4fd0-a99e-fe0098dc6675"
		],
		"folders_order": [],
		"type": "folder",
		"depth": 1
	},
	"environment": null,
	"globals": [
		{
			"key": "epic_argo_r4",
			"value": "https://connectathon.epic.com/Interconnect-Fhir-Unsecure/api/FHIR/R4/",
			"enabled": false
		},
		{
			"key": "bin_url",
			"value": "http://test.fhir.org/r3/Binary/omh-stepcount-example",
			"enabled": true
		},
		{
			"key": "commonTests",
			"value": "() => {\n// check if get a 200 back for successful search\npm.test(\"Description:\" + request.description, function () {\n    pm.response;\n});\n//console.log(pm.request.url.query.all())\nvar query = {};\nvar good_to_go = true;\npm.request.url.query.all().forEach((param) => { \n    //console.log(param.key + ', param.value = ' + param.value);\n    if (param.value == null || param.value.startsWith('{')) {\n              pm.test(\"no \" +  param.key + \" value = \" + param.value, function () {\n              pm.expect.fail();\n              });\n             good_to_go = false; \n        }\n    });\n\n\nif (good_to_go){\nvar resource_type = pm.environment.get(\"resource_type\");\npm.test(\"response is ok\" + resource_type, function () {\n    pm.response.to.have.status(200);\n});\nif (pm.response.code === 200){\n    try{\n        var b = pm.response.json();\n        var has_r =false ;\n        for (var i in b.entry) {\n            r = b.entry[i].resource;\n            if  (r.resourceType == resource_type )\n            {\n                pm.test('Resource Type= ' + r.resourceType + \" id = \" + r.id, function () {});\n                has_r = true ;\n            }\n            }\n            if  (has_r === false){\n            pm.test(\"no \" + resource_type + \" in bundle\", function () {\n              pm.expect.fail();\n              });\n            }\n        }\n        \n        catch(e){\n            console.log(e);\n        }\n    }\n}\n}",
			"enabled": true
		},
		{
			"key": "reset_env",
			"value": "() => {\n// reset all environmental variable for Encounter\nuri = pm.environment.get(\"uri\");\npatient = pm.environment.get(\"patient\");\npm.environment.clear();\npm.environment.set(\"uri\", uri);\npm.environment.set(\"patient\", patient);\n}",
			"enabled": true
		},
		{
			"key": "base_url",
			"value": "http://hapi.fhir.org/baseR4",
			"enabled": true
		}
	],
	"results": [
		{
			"name": "{{uri}}/AllergyIntolerance?patient={{pid}}",
			"id": "8d8cc065-248a-41ba-8b82-7bfab6aa5ae7",
			"url": "https://connectathon.epic.com/Interconnect-Fhir-Unsecure/api/FHIR/R4//AllergyIntolerance?patient=eroCd17NbCffM3E3WXi7eOQ3",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"tests": {
				"Description:SHALL support searching for all allergies for a patient using the patient search parameter:\n\nGET [base]/AllergyIntolerance?patient=[reference]": true,
				"response is ok": false
			},
			"testPassFailCounts": {
				"Description:SHALL support searching for all allergies for a patient using the patient search parameter:\n\nGET [base]/AllergyIntolerance?patient=[reference]": {
					"pass": 1,
					"fail": 0
				},
				"response is ok": {
					"pass": 0,
					"fail": 1
				}
			},
			"times": [
				"145"
			],
			"allTests": [
				{
					"Description:SHALL support searching for all allergies for a patient using the patient search parameter:\n\nGET [base]/AllergyIntolerance?patient=[reference]": true,
					"response is ok": false
				}
			],
			"time": "145",
			"totalRequestTime": "145",
			"iterationResults": {}
		},
		{
			"name": "{{uri}}/AllergyIntolerance?patient={{pid}}&clinical-status={{clinical-status}}",
			"id": "c926fee7-9839-4fd0-a99e-fe0098dc6675",
			"url": "https://connectathon.epic.com/Interconnect-Fhir-Unsecure/api/FHIR/R4//AllergyIntolerance?patient=eroCd17NbCffM3E3WXi7eOQ3&clinical-status={{clinical-status}}",
			"totalTime": 0,
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"tests": {
				"Description:SHOULD support searching using the combination of the patient and clinical-status search parameters:\n\nGET [base]/AllergyIntolerance?patient=[reference]&amp;clinical-status={[system]}|[code]": true,
				"no clinical-status value = {{clinical-status}}": false
			},
			"testPassFailCounts": {
				"Description:SHOULD support searching using the combination of the patient and clinical-status search parameters:\n\nGET [base]/AllergyIntolerance?patient=[reference]&amp;clinical-status={[system]}|[code]": {
					"pass": 1,
					"fail": 0
				},
				"no clinical-status value = {{clinical-status}}": {
					"pass": 0,
					"fail": 1
				}
			},
			"times": [
				"103"
			],
			"allTests": [
				{
					"Description:SHOULD support searching using the combination of the patient and clinical-status search parameters:\n\nGET [base]/AllergyIntolerance?patient=[reference]&amp;clinical-status={[system]}|[code]": true,
					"no clinical-status value = {{clinical-status}}": false
				}
			],
			"time": "103",
			"totalRequestTime": "103",
			"iterationResults": {}
		}
	],
	"totalPass": 2,
	"totalFail": 2,
	"totalTime": 248,
	"lifecycle": "done",
	"requests": [
		{
			"name": "{{uri}}/AllergyIntolerance?patient={{pid}}",
			"id": "8d8cc065-248a-41ba-8b82-7bfab6aa5ae7",
			"url": "https://connectathon.epic.com/Interconnect-Fhir-Unsecure/api/FHIR/R4//AllergyIntolerance?patient=eroCd17NbCffM3E3WXi7eOQ3",
			"time": "2019-07-24T00:03:58.270Z",
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"testPassFailCounts": {
				"Description:SHALL support searching for all allergies for a patient using the patient search parameter:\n\nGET [base]/AllergyIntolerance?patient=[reference]": {
					"pass": 1,
					"fail": 0
				},
				"response is ok": {
					"pass": 0,
					"fail": 1
				}
			}
		},
		{
			"name": "{{uri}}/AllergyIntolerance?patient={{pid}}&clinical-status={{clinical-status}}",
			"id": "c926fee7-9839-4fd0-a99e-fe0098dc6675",
			"url": "https://connectathon.epic.com/Interconnect-Fhir-Unsecure/api/FHIR/R4//AllergyIntolerance?patient=eroCd17NbCffM3E3WXi7eOQ3&clinical-status={{clinical-status}}",
			"time": "2019-07-24T00:03:58.270Z",
			"responseCode": {
				"code": 400,
				"name": "Bad Request",
				"detail": {
					"name": "Bad Request",
					"detail": "The request cannot be fulfilled due to bad syntax."
				}
			},
			"testPassFailCounts": {
				"Description:SHOULD support searching using the combination of the patient and clinical-status search parameters:\n\nGET [base]/AllergyIntolerance?patient=[reference]&amp;clinical-status={[system]}|[code]": {
					"pass": 1,
					"fail": 0
				},
				"no clinical-status value = {{clinical-status}}": {
					"pass": 0,
					"fail": 1
				}
			}
		}
	],
	"synced": false
}